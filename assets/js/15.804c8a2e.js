(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{235:function(e,i,t){"use strict";t.r(i);var a=t(0),n=Object(a.a)({},(function(){var e=this,i=e.$createElement,t=e._self._c||i;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"synchronisation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronisation"}},[e._v("#")]),e._v(" Synchronisation")]),e._v(" "),t("h2",{attrs:{id:"semaphore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[e._v("#")]),e._v(" Semaphore")]),e._v(" "),t("ul",[t("li",[e._v("Een semaphore is een ‘teller’ die bepaalt hoeveel threads/processen toegang mogen hebben tot een resource of kritieke sectie")]),e._v(" "),t("li",[e._v("Bij initialisatie wordt ingesteld hoeveel threads toegang mogen hebben. (In dit geval 5)")]),e._v(" "),t("li",[e._v("Een thread vraagt toegang middels een wait() aanroep\n"),t("ul",[t("li",[e._v("De semaphore verlaagd zichzelf.")]),e._v(" "),t("li",[e._v("Waarde nu >= 0 => doe niets")]),e._v(" "),t("li",[e._v("Waarde nu <0 => blokkeer aanroepende thread en plaats deze in een wachtrij")])])]),e._v(" "),t("li",[e._v("Een thread geeft semaphore weer vrij middels een signal() aanroep\n"),t("ul",[t("li",[e._v("De semaphore verhoogd zichzelf")]),e._v(" "),t("li",[e._v("Waarde nu <=0 deblokkeer een thread/proces uit de wachtrij")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/k6tJKOF.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"binaire-semaphore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binaire-semaphore"}},[e._v("#")]),e._v(" Binaire Semaphore")]),e._v(" "),t("ul",[t("li",[e._v("Een semaphore die geïnitialiseerd is op ‘1’")]),e._v(" "),t("li",[e._v("Er kan dus maar 1 thread/proces gelijktijdig de semaphore ‘pakken’")]),e._v(" "),t("li",[e._v("Een vorm van mutual exclusion")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/YRDknQC.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"multithreaded-kruispunt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multithreaded-kruispunt"}},[e._v("#")]),e._v(" Multithreaded kruispunt")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/2Lw1E4e.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"de-kapperszaak"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#de-kapperszaak"}},[e._v("#")]),e._v(" De kapperszaak")]),e._v(" "),t("div",{staticStyle:{width:"100%",height:"0px",position:"relative","padding-bottom":"56.250%"}},[t("iframe",{staticStyle:{width:"100%",height:"100%",position:"absolute",left:"0px",top:"0px",overflow:"hidden"},attrs:{src:"https://streamable.com/s/i5eir/vkyitm",frameborder:"0",width:"100%",height:"100%",allowfullscreen:""}})]),e._v(" "),t("h2",{attrs:{id:"monitors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#monitors"}},[e._v("#")]),e._v(" Monitors")]),e._v(" "),t("ul",[t("li",[e._v("Een programmeertaal constructie om synchronisation te realiseren\n"),t("ul",[t("li",[e._v("Mogelijkheid om op een object een ‘lock’ te krijgen")]),e._v(" "),t("li",[e._v("Maar 1 thread kan gelijktijdig gebruik maken van een object en haar methodes")]),e._v(" "),t("li",[e._v("Veel gebruikt in OO-talen")])])]),e._v(" "),t("li",[e._v("Groot voordeel:\n"),t("ul",[t("li",[e._v("Juiste implementatie van synchronisatie is verantwoordelijkheid van monitor object en niet van de aanroeper !")]),e._v(" "),t("li",[e._v("Daardoor makkelijker in gebruik dan semaphores en minder foutgevoelig")])])]),e._v(" "),t("li",[e._v("Aanroepen:\n"),t("ul",[t("li",[e._v("Monitor.Enter(object) and Monitor.Exit(object)")]),e._v(" "),t("li",[e._v("Monitor.Wait(object)")]),e._v(" "),t("li",[e._v("Monitor.Pulse(object) (soms Monitor.Signal() )")]),e._v(" "),t("li",[e._v("Monitor.PulseAll(object)")])])]),e._v(" "),t("li",[e._v("Bij PulseAll worden alle threads die aan het wachten zijn op toegang tot het object vrijgegeven\n"),t("ul",[t("li",[e._v("Van belang om na Wait() aanroep gewenste conditie opnieuw te controlleren")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/uZ1R7Mw.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"messaging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#messaging"}},[e._v("#")]),e._v(" Messaging")]),e._v(" "),t("ul",[t("li",[e._v("Combinatie van proces synchronisatie en communicatie")]),e._v(" "),t("li",[e._v("Niet afhankelijk van ‘shared memory’ model.\n"),t("ul",[t("li",[e._v("Processen kunnen ook op verschillende machines draaien (Gedistribueerde systemen)")])])]),e._v(" "),t("li",[e._v("Aanroepen:\n"),t("ul",[t("li",[e._v("send (destination, message)")]),e._v(" "),t("li",[e._v("receive(source, message)")])])]),e._v(" "),t("li",[e._v("Aanroep kan blocking of non-blocking zijn\n"),t("ul",[t("li",[e._v("Meestal Send => non-blocking, receive => blocking")])])]),e._v(" "),t("li",[e._v("Voorbeeld van messaging systeem is Windows")]),e._v(" "),t("li",[e._v("Aanroepen:\n"),t("ul",[t("li",[e._v("send (destination, message)")]),e._v(" "),t("li",[e._v("receive(source, message)")])])]),e._v(" "),t("li",[e._v("Wat zijn destination en source ?\n"),t("ul",[t("li",[e._v("Directe adressen (rechtstreeks communiceren met een thread die je kent / zelf aangemaakt hebt)")]),e._v(" "),t("li",[e._v("Indirecte adressen (communiceren met andere threads via ‘mailboxen’")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/ty2kJCY.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"lezers-en-schrijversprobleem"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lezers-en-schrijversprobleem"}},[e._v("#")]),e._v(" Lezers en schrijversprobleem")]),e._v(" "),t("ul",[t("li",[e._v("Vaak wordt een ‘resource’ door verschillende threads gebruikt (gelezen) maar slechts door enkele threads beschreven.")]),e._v(" "),t("li",[e._v("Voor synchronisatie moeten de volgende condities bewaakt worden\n"),t("ul",[t("li",[e._v("Iedereen mag gelijktijdig de waarde lezen")]),e._v(" "),t("li",[e._v("Slechts 1 schrijver mag op een bepaald moment schrijftoegang hebben")]),e._v(" "),t("li",[e._v("Tijdens het schrijven hebben lezers geen toegang")])])]),e._v(" "),t("li",[e._v("Dus:\n"),t("ul",[t("li",[e._v("Geen mutual exclusion tussen lezers")]),e._v(" "),t("li",[e._v("Wel mutual exclusion tussen schrijvers onderling en tussen schrijvers en lezers")])])]),e._v(" "),t("li",[e._v("Reden:\n"),t("ul",[t("li",[e._v("Standaard mutual exclusion is soms inefficient wanneer de gedeelde data vaak gelezen moet worden")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/rG16aOY.png",alt:""}})])])}),[],!1,null,null,null);i.default=n.exports}}]);